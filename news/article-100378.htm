<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://vpnopen.github.io/news/article-100378.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>@order 注解用法</title>
        <meta name="description" content="@order注解是spring-core包下的一个注解，@Order的作用是定义Spring IOC容器中Bean的执行顺序的优先级（这里的顺序也可以理解为存放到容器中的先后顺序）。开发过程当中有时候" />
        <link rel="icon" href="/assets/website/img/surgenode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Open VPN 节点订阅中文官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://vpnopen.github.io/news/article-100378.htm" />
    <meta property="og:site_name" content="Open VPN 节点订阅中文官网" />
    <meta property="og:title" content="@order 注解用法" />
    <meta property="og:image" content="https://vpnopen.github.io/uploads/20240723/562cc8d1c0dd29205ea824672399b98b.webp" />
        <meta property="og:release_date" content="2025-04-20T09:04:57" />
    <meta property="og:updated_time" content="2025-04-20T09:04:57" />
        <meta property="og:description" content="@order注解是spring-core包下的一个注解，@Order的作用是定义Spring IOC容器中Bean的执行顺序的优先级（这里的顺序也可以理解为存放到容器中的先后顺序）。开发过程当中有时候" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="@order 注解用法">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Bootstrap -->
    <link href="/assets/website/css/surgenode/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/css/surgenode/style.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/website/css/surgenode/font-awesome.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/css/G.css" />
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-79V7YWYKV1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-79V7YWYKV1');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- header-section start -->
<div class="header navbar-fixed-top">
    <div class="container">
        <div class="row">
            <div class="col-lg-4 col-md-2 col-sm-12 col-xs-12">
                <a href="/" class="navbar-brand">
                                <span>Open VPN</span>
                                </a>
            </div>
            <div class="col-lg-8 col-md-10 col-sm-12 col-xs-12">
                <div class="navigation">
                    <div id="navigation">
                        <ul>
                                                        <li><a href="/" title="首页">首页</a></li>
                                                        <li><a href="/free-nodes/" title="免费节点">免费节点</a></li>
                                                        <li><a href="/paid-subscribe/" title="推荐机场">推荐机场</a></li>
                                                        <li><a href="/news/" title="新闻资讯">新闻资讯</a></li>
                                                        <li><a href="/client.htm" title="客户端">客户端</a></li>
                                                    </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- header-section close -->
    <!-- header-section close -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="page-section">
                    <div class="col-md-6">
                        <div class="page-description">
                            <h1 class="page-title">@order 注解用法</h1>
                        </div>
                    </div>
                    <div class="col-md-12">
                        <div class="page-breadcrumb">
                            <ol class="breadcrumb">
                                <li><a href="/">首页</a></li>
                                <li><a href="/news/">新闻资讯</a></li>
                                <li>正文</li>
                            </ol>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--pageheader close -->
        <!-- hero-section close -->
    <div class="space-medium">
        <!-- service-section start -->
        <div class="container">
            <div class="row">
                <!-- service start -->
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="Clash Node官网订阅站" data-url="https://clashnode.github.io">
                <div class="xcblog-blog-detail">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <p><code>@order</code>注解是<code>spring-core</code>包下的一个注解，<code>@Order</code>的作用是定义Spring IOC容器中Bean的执行顺序的优先级（这里的顺序也可以理解为存放到容器中的先后顺序）。开发过程当中有时候经常会出现配置依赖关系，例如注入A对象使用了<code>@ConditionalOnBean(B.class)</code>，意思是要求容器当中必须存在<code>B.class</code>的实例的时候，才会进行注入<code>A</code>。这时候我们就必须保证B对象在注入<code>A</code>对象前进行注入。</p> <div class="toc"> <h3>目录</h3> <ul> <li> <ul> <li><a href="#order_4" rel="nofollow">一、观察@order源码</a></li> <li><a href="#order_30" rel="nofollow">二、@order实战</a></li> <li><a href="#order_116" rel="nofollow">三、@order失效原因</a></li> <li><a href="#_126" rel="nofollow">四、解决排序问题</a></li> <li><a href="#_183" rel="nofollow">五、排序源码分析</a></li> <li><a href="#AutoConfigureOrder_201" rel="nofollow">六、@AutoConfigureOrder</a></li> </ul> </li> </ul> </div> <h2><a id="order_4" rel="nofollow"></a>一、观察@order源码</h2> <p><strong>（1）源码当中有三个元注解：</strong></p> <ul> <li><strong>@Target({ElementType.TYPE, ElementType.METHOD, ElementType.FIELD})：</strong> 使用范围接口、类、枚举、注解、方法、字段</li> <li><strong>@Retention(RetentionPolicy.RUNTIME)：</strong> @Retention是用来修饰注解的生命周期的，RetentionPolicy.RUNTIME代表的是不仅被保存到class文件中，jvm加载class文件之后，仍然存在；一直有效！</li> <li><strong>@Documented：</strong> @Documented和@Deprecated注解长得有点像，@Deprecated是用来标注某个类或者方法不建议再继续使用，@Documented只能用在注解上，如果一个注解@B，被@Documented标注，那么被@B修饰的类，生成Javadoc文档时，会显示@B。</li> </ul> <p><strong>（2）属性：</strong></p> <p>@order当中只要一个value属性，而且还是int类型，值越低优先级越高，默认值是<code>Ordered.LOWEST_PRECEDENCE</code>，表示最低优先级(输给任何其他指定的顺序值)。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221201/f172bc88c72a4a42c6a1cbc276ba77db.jpg" alt="@order 注解用法"></p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>FIELD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span><span class="token annotation punctuation">@interface</span><span class="token class-name">Order</span><span class="token punctuation">{<!-- --></span><span class="token keyword">int</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token number">2147483647</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>官网注释：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/spring-projects/spring-framework/blob/main/spring-core/src/main/java/org/springframework/core/annotation/Order.java"  rel="nofollow">https://github.com/spring-projects/spring-framework/blob/main/spring-core/src/main/java/org/springframework/core/annotation/Order.java</a></p> <h2><a id="order_30" rel="nofollow"></a>二、@order实战</h2> <p><strong>（1）自定义两个配置类</strong></p> <blockquote> <p>我们要求Config2先进行加载，然后通过@order来排序测试一下</p> </blockquote> <pre><code class="prism language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">Config1</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token class-name">Config1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Config1构建了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">Config2</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token class-name">Config2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Config2构建了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p><strong>（2）启动项目测试：默认是先创建的Config1后创建的Config2</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221201/79b5f99c115aa419eb274f7772113457.jpg" alt="@order 注解用法"></p> <p><strong>（3）既然order可以控制加载顺序，那我们来试验一下，然后让Config2 先加载</strong></p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">Config1</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token class-name">Config1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Config1构建了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">Config2</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token class-name">Config2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Config2构建了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>但是好像没什么卵用</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221201/ba6760faf08be3195c6fd21b15e17d23.jpg" alt="@order 注解用法"></p> <p><strong>（4）分析原因</strong></p> <p>目前这两个是在同包情况下不起作用。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221201/a5064c79dff205dd8e62348290385755.jpg" alt="@order 注解用法"><br /> 于是进行分开了</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221201/9ec8a2af692b2553730e78f14b1fe9cf.jpg" alt="@order 注解用法"></p> <p>分开之后竟然生效了</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221201/ea838d78873aaeb4b1bfafdea3e559b1.jpg" alt="@order 注解用法"></p> <p><strong>（5）但是分开也是将Config2放到了上面的包当中，于是我又改成了Config1放到最上面，这样进行测试，结果又失效了</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221201/71db11fd81ca7cc70f238a6a84ac024d.jpg" alt="@order 注解用法"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221201/5ba1f58346b8753025eb3c1b65dabf62.jpg" alt="@order 注解用法"></p> <p><strong>（6）于是我又放在了同包下，将Config2命名为A开头的，这样他就放到了最上面，于是这样同样也生效了。</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221201/bc94cabb5c98dd10b3577b863689c144.jpg" alt="@order 注解用法"><br /><img decoding="async" src="http://img.555519.xyz/uploads/20221201/1808eb185758b60ed96bb49b43d43d5a.jpg" alt="@order 注解用法"></p> <p>期间我还尝试着将@Configuration都改为使用@Component，结果仍然不变。</p> <blockquote> <p>得出结论：<code>@order</code>指定加载顺序还跟类的命名和存放位置有关！假如有<code>Config1</code>和<code>Config2</code>两个类在一个包下，要求是<code>Config2</code>先加载：</p> </blockquote> <ol> <li>这时候设置<code>Config2</code>的<code>@order值</code>就算是小于<code>Config1</code>的<code>@order值</code>同样也是<code>Config1</code>先加载。</li> <li>如果同包情况下可以重新命名Config2，只要在Config1上面就行。</li> <li>或者拆开不同包也可以，但是Config2所在的包也必须比Config1所呆的包上面。</li> </ol> <p>这样才能保证@Order生效！</p> <h2><a id="order_116" rel="nofollow"></a>三、@order失效原因</h2> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-constructor-injection"  rel="nofollow">https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-constructor-injection</a></p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221201/a10de2b5ed59d08b145406000fd7f566.jpg" alt="@order 注解用法"></p> <p>最关键的一句话：您可以在目标类级别和@Bean方法上声明@Order注释，可能针对的是单个bean定义(如果多个定义使用同一个bean类)。<code>@Order值可能会影响注入点的优先级，但请注意，它们不会影响单例启动顺序</code>，这是由依赖关系和@DependsOn声明确定的正交关注。</p> <p>我理解的注入点的优先级应该是指的存放容器的先后顺序，也就是他并不会影响启动顺序。</p> <h2><a id="_126" rel="nofollow"></a>四、解决排序问题</h2> <p>我们不可能每次遇到这种问题又是改名又是换包的，所以，springboot提供了如下三个注解可以控制顺序：</p> <ul> <li>@AutoConfigureAfter：当前配置类在指定配置类之后执行</li> <li>@AutoConfigureBefore：当前配置类在指定配置类之前执行</li> <li>@AutoConfigureOrder：指定优先级，数值越小，优先级越高。</li> </ul> <p><strong>（1）首先将代码改回原来的样子</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221201/6aa5f6c4a323e4055b747abd33740435.jpg" alt="@order 注解用法"></p> <p><strong>（2）在Config2使用@AutoConfigureBefore(Config1.class)，代表的是在config1加载前进行加载</strong></p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">Config1</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token class-name">Config1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Config1构建了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@AutoConfigureBefore</span><span class="token punctuation">(</span><span class="token class-name">Config1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">Config2</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token class-name">Config2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Config2构建了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p><strong>（3）输出结果，显然还是没生效</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221201/631be1ce60c5b86321a1e400806a7212.jpg" alt="@order 注解用法"></p> <blockquote> <p>可能有时候走了狗屎运给你一种错觉还真的配置成功了。实际上这种方式是不可行的，以上三个注解只有针对<code>自动配置类</code>才会生效。</p> </blockquote> <p>在autoconfigure包下就有spring.factories，这个文件配置了自动配置类，springboot会读取这个文件的，我们也可以在自己项目上定义spring.factories，这样我们的配置类对于@AutoConfigureAfter注解就可以生效了。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221201/81f824afe06e0b64f97e783f43703c48.jpg" alt="@order 注解用法"></p> <p><strong>（4）自定义spring.factories</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221201/11808207be0440a4159a52cd6685f2ac.jpg" alt="@order 注解用法"></p> <p>第一行是固定的，后面的就是全类名，虽然只有Config2使用了注解，但是需求是和Config1进行排序，所以这两个都得加。</p> <pre><code class="prism language-JAVA">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\ com.gzl.cn.springbootcache.config.Config2,\ com.gzl.cn.springbootcache.config.Config1</code></pre> <p><strong>（5）测试，成功解决</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221201/bb47103eab847ca882825649f5e73e1a.jpg" alt="@order 注解用法"></p> <h2><a id="_183" rel="nofollow"></a>五、排序源码分析</h2> <p>针对于@AutoConfigure那三个注解原理：其实关键的代码还是在AutoConfigurationImportSelector中，将自动配置类从spring.factories加载出来之后会根据条件排序（只有自动配置类！），在selectImports()方法中最后一行代码如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221201/03f7bf6da43bfc085aee038afce653aa.jpg" alt="@order 注解用法"></p> <p>紧接着会走到这个地方，实际上是分了三步排序：</p> <ol> <li>先按照文件名字母排序</li> <li>按照@AutoConfigureOrder进行排序</li> <li>按照 @AutoConfigureBefore和@AutoConfigureAfter排序</li> </ol> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221201/1081e7ea5f3203fbd71254673df79055.jpg" alt="@order 注解用法"><br /> 从上面配置的顺序可以知道，最终决定权还是在@AutoConfigureAfter、@AutoConfigureBefore这两个注解。</p> <p>当我们不设置spring.factories的时候，这里面压根都没有这两个类！</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221201/dc330900d7c72f77e1a177eaa132333c.jpg" alt="@order 注解用法"></p> <h2><a id="AutoConfigureOrder_201" rel="nofollow"></a>六、@AutoConfigureOrder</h2> <p>这种也是可以的！当然前提也是需要配置spring.factories</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">Config1</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token class-name">Config1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Config1构建了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">Config2</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token class-name">Config2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Config2构建了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> </div> 			                </div>
                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-100377.htm">我们如何检查特定MySQL数据库的默认字符集？</a></p>
                                        <p>下一个：<a href="/news/article-100966.htm">动物医院法定条件有哪些呢（动物医院归哪里管）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-98148.htm" title="JavaScript如何从数组中滤除素数">JavaScript如何从数组中滤除素数</a></li>
                        <li class="py-2"><a href="/news/article-86346.htm" title="适合穷人养的猫有哪些品种（建议穷人养的10种猫）">适合穷人养的猫有哪些品种（建议穷人养的10种猫）</a></li>
                        <li class="py-2"><a href="/news/article-101723.htm" title="猫三联多少钱一针?（猫三联多少钱一针多久打一次）">猫三联多少钱一针?（猫三联多少钱一针多久打一次）</a></li>
                        <li class="py-2"><a href="/news/article-91141.htm" title="代理宠物粮食生意怎么样 代理宠物粮食生意怎么样啊">代理宠物粮食生意怎么样 代理宠物粮食生意怎么样啊</a></li>
                        <li class="py-2"><a href="/news/article-89902.htm" title="宠物打疫苗可以上门服务吗现在（宠物上门打疫苗多少钱）">宠物打疫苗可以上门服务吗现在（宠物上门打疫苗多少钱）</a></li>
                        <li class="py-2"><a href="/news/article-86345.htm" title="Hyperledger Fabric 通道配置文件和容器环境变量详解">Hyperledger Fabric 通道配置文件和容器环境变量详解</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-15-node-share-links.htm" title="Open VPN | 4月15日18.2M/S|免费SSR/Clash/Shadowrocket/V2ray订阅节点分享">Open VPN | 4月15日18.2M/S|免费SSR/Clash/Shadowrocket/V2ray订阅节点分享</a></li>
                        <li class="py-2"><a href="/news/article-88437.htm" title="宠物领养app开发背景介绍图（宠物领养app设计）">宠物领养app开发背景介绍图（宠物领养app设计）</a></li>
                        <li class="py-2"><a href="/news/article-85725.htm" title="重庆宠物狗领养中心地址在哪里（重庆宠物领养中心宠物领养）">重庆宠物狗领养中心地址在哪里（重庆宠物领养中心宠物领养）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-17-clash-v2ray-ss-ssr.htm" title="Open VPN | 4月17日20.9M/S|免费V2ray/SSR/Shadowrocket/Clash订阅节点分享">Open VPN | 4月17日20.9M/S|免费V2ray/SSR/Shadowrocket/Clash订阅节点分享</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">69</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">3</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
                <!-- service close -->
            </div>
        </div>
        <!-- service-section close -->
    </div>
        <!-- footer start -->
    <div class="tiny-footer">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                                        <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                    Open VPN 节点订阅中文官网 版权所有 Powered by WordPress
                </div>
            </div>
        </div>
    </div>
    <!-- footer close -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/website/js/frontend/surgenode/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/website/js/frontend/surgenode/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/surgenode/menumaker.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/surgenode/navigation.js" type="text/javascript"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>